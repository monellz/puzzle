#include <cstdint>
#include <cstdlib>
#include <string_view>
#include <utility>
#include <variant>
#include <vector>

#include "puzzle/frontend/ast.h"
namespace puzzle::ast {
using u8 = uint8_t;
using u16 = uint16_t;
using u32 = uint32_t;

struct Token {
  enum Kind : u32 {
    _Eps,
    _Eof,
    _Err,
    Or,
    And,
    Eq,
    Ne,
    Lt,
    Le,
    Ge,
    Gt,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Unary,
    RPar,
    Empty,
    Else,
    In,
    Out,
    Grid,
    Const,
    Pad,
    UpperBound,
    LowerBound,
    If,
    Stencil,
    Assign,
    Comma,
    Semi,
    Not,
    LPar,
    LBrk,
    RBrk,
    LBrc,
    RBrc,
    IntLit,
    FloatLit,
    Ident
  } kind;
  std::string_view piece;
  u32 line, col;
};

using StackItem = std::variant<Token, std::unique_ptr<Module>, std::vector<std::unique_ptr<Decl>>,
                               std::vector<std::unique_ptr<Info>>, std::unique_ptr<Decl>, std::unique_ptr<Kernel>,
                               std::unique_ptr<Block>, std::vector<std::unique_ptr<Stmt>>, std::unique_ptr<Stmt>,
                               std::vector<int>, std::unique_ptr<Expr>, std::vector<std::unique_ptr<Expr>>>;

struct Lexer {
  std::string_view string;
  std::string_view fn;
  u32 line, col;

  explicit Lexer(std::string_view string, std::string_view fn = "") : string(string), fn(fn), line(1), col(1) {}
  Token next();
};

struct Parser {
  std::variant<std::unique_ptr<Module>, Token> parse(Lexer &lexer);
};

Token Lexer::next() {
  const static Token::Kind ACC[] = {
      Token::_Err,    Token::_Err,   Token::_Eps,  Token::Not,    Token::Mod,      Token::_Err,       Token::LPar,
      Token::RPar,    Token::Mul,    Token::Add,   Token::Comma,  Token::Sub,      Token::Div,        Token::IntLit,
      Token::IntLit,  Token::Semi,   Token::Lt,    Token::Assign, Token::Gt,       Token::Ident,      Token::Ident,
      Token::Ident,   Token::Ident,  Token::Ident, Token::Ident,  Token::Ident,    Token::Ident,      Token::LBrk,
      Token::RBrk,    Token::Ident,  Token::Ident, Token::Ident,  Token::LBrc,     Token::_Err,       Token::RBrc,
      Token::Ne,      Token::And,    Token::_Err,  Token::_Eps,   Token::FloatLit, Token::_Err,       Token::Le,
      Token::Eq,      Token::Ge,     Token::Ident, Token::Ident,  Token::In,       Token::Ident,      Token::Ident,
      Token::Ident,   Token::Ident,  Token::Ident, Token::If,     Token::Ident,    Token::Or,         Token::_Err,
      Token::_Err,    Token::IntLit, Token::Ident, Token::Ident,  Token::Ident,    Token::Out,        Token::Pad,
      Token::Ident,   Token::Ident,  Token::Ident, Token::_Eps,   Token::_Err,     Token::FloatLit,   Token::Ident,
      Token::Grid,    Token::Ident,  Token::Ident, Token::Else,   Token::Ident,    Token::Const,      Token::Ident,
      Token::Ident,   Token::Ident,  Token::Ident, Token::Ident,  Token::Ident,    Token::Ident,      Token::Ident,
      Token::Stencil, Token::Ident,  Token::Ident, Token::Ident,  Token::Ident,    Token::LowerBound, Token::UpperBound,
  };
  const static u8 EC[] = {
      0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  1,  3,  0,  0,  0,  4,  5,  0,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 15, 15,
      15, 15, 15, 15, 15, 15, 0,  16, 17, 18, 19, 0,  0,  20, 21, 22, 20, 23, 20, 24, 25, 26, 25, 25, 27, 25,
      25, 28, 29, 25, 25, 25, 25, 30, 25, 25, 25, 25, 25, 31, 0,  32, 0,  25, 0,  33, 20, 34, 35, 36, 37, 25,
      25, 38, 25, 25, 39, 25, 40, 41, 42, 25, 43, 44, 45, 46, 25, 47, 48, 25, 25, 49, 50, 51, 0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0};
  const static u8 DFA_EDGE[][52] = {
      {1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 1,  12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 19, 21, 19,
       22, 23, 24, 25, 26, 27, 28, 19, 19, 19, 29, 19, 30, 19, 19, 19, 19, 19, 31, 19, 19, 19, 19, 32, 33, 34},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0, 40, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 44, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 45, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 46, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 47, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 48, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 49, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 50, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 51, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 52, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 53, 19, 19, 19, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {37, 37, 37, 37, 37, 37, 37, 37, 55, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
       37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
      {38, 38, 0,  38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
       38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 39, 39, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0, 57, 57, 0, 0, 0, 0, 57, 57, 57, 57, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0,  0,  0,  0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 58, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 59, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 61, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 62, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 63, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 64, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 65, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 66, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
       37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 67, 0, 0, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0, 57, 57, 0, 0, 0, 0, 57, 57, 57, 57, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 57, 57, 57, 57, 57, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0,  0,  0,  0, 0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 69, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 70, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 71, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 72, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 73, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 74, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 75, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 76, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 77, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 78, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 79, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 80, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 81, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 82, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 83, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 84, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 85, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 86, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 87, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 88, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 89, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 90, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
      {0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  19, 19, 0,  0,  0,  0,  19, 19, 19, 19, 19, 19,
       19, 19, 19, 19, 19, 0, 0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0,  0,  0},
  };
  u32 l = line, c = col;
  Token::Kind last_acc = Token::_Err;
  u32 state = 0, i = 0;
  while (true) {
    u32 ch, nxt;
    if (i < string.size()) {
      ch = string[i], nxt = DFA_EDGE[state][EC[ch]];
    } else {
      ch = nxt = 0;
    }
    Token::Kind acc = ACC[nxt];
    if (acc != Token::_Err) {
      last_acc = acc;
    }
    state = nxt;
    if (nxt == 0) {  // dead, should not eat this char
      // we are not using substr here, because it does range check and may throws exception
      std::string_view piece(string.data(), i);
      string = std::string_view(string.data() + i, string.size() - i);
      if (i == 0 || last_acc != Token::_Eps) {
        return Token{i == 0 ? Token::_Eof : last_acc, piece, l, c};
      } else {
        l = line, c = col, last_acc = Token::_Err, state = 0, i = 0;
      }
    } else {  // continue, eat this char
      if (ch == '\n') {
        ++line, col = 1;
      } else {
        ++col;
      }
      ++i;
    }
  }
}

std::variant<std::unique_ptr<Module>, Token> Parser::parse(Lexer &lexer) {
  const static u8 PROD[] = {0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
                            7,  8,  9,  10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15, 15, 15, 15,
                            15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 18};
  const static u16 ACTION[][41] = {
      {
          3,  13, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  13,
          13, 13, 13, 13, 13, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13,
      },
      {
          3,  2,  3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  8,
          12, 16, 20, 24, 28, 32, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 36,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 52, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 56, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 60, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 65, 3, 3, 3, 3, 3, 3, 3, 3, 64,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49, 3, 3, 3, 3, 3, 3, 3, 3, 80,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49, 3, 3, 3, 3, 3, 3, 3, 3, 80,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49, 3, 3, 3, 3, 3, 3, 3, 3, 80,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 100, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
          1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
      },
      {
          3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
          5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
      },
      {
          3, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
          9, 9, 9, 9, 9, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 104, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 112, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3,   3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 116, 85, 85, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 120, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 124, 61, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 73, 73, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 128, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 132, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 136, 45, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 140, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 144, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 148, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 152, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 156, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 160, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 164, 168, 3,
      },
      {
          3,  29, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  29,
          29, 29, 29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 64,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 129, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 176, 3, 3,
      },
      {
          3,  41, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  41,
          41, 41, 41, 41, 41, 41, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 41,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 188,
      },
      {
          3,  33, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  33,
          33, 33, 33, 33, 33, 33, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 33,
      },
      {
          3,  37, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  37,
          37, 37, 37, 37, 37, 37, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 37,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 192, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 65, 3, 3, 3, 3, 3, 3, 3, 3, 64,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 65, 3, 3, 3, 3, 3, 3, 3, 3, 64,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 65, 3, 3, 3, 3, 3, 3, 3, 3, 64,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 81, 81, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 77, 77, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 69, 69, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,   3, 3, 137, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 137, 3, 3, 3, 3, 137, 3, 3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 212, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,   3, 3, 125, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 216, 3, 3, 3, 3, 125, 3, 3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 220, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 3,   3,
          3, 3, 3, 3, 3, 3, 101, 3, 3, 3, 3, 3, 3, 3, 3, 101, 101, 3, 3, 101,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 228, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 232, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 236, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 240, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 57, 57, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 244, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 129, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 176, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 3,   3,
          3, 3, 3, 3, 3, 3, 252, 3, 3, 3, 3, 3, 3, 3, 3, 192, 256, 3, 3, 260,
      },
      {
          3,  89, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  89,
          89, 89, 89, 89, 89, 89, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 89,
      },
      {
          3,  17, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  17,
          17, 17, 17, 17, 17, 17, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 17,
      },
      {
          3,  21, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  21,
          21, 21, 21, 21, 21, 21, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 21,
      },
      {
          3,  25, 3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  25,
          25, 25, 25, 25, 25, 25, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 25,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,   3, 3, 133, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 133, 3, 3, 3, 3, 133, 3, 3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 272, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 276, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3, 3,  3,  3, 3, 93, 3,
          3, 3, 3, 3, 3, 3, 93, 3, 3, 3, 93, 3, 3, 3, 3, 93, 93, 3, 3, 93,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 280, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 113, 3,
          3, 3, 3, 3, 3, 3, 113, 3, 3, 3, 3, 3, 3, 3, 3, 113, 113, 3, 3, 113,
      },
      {
          3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3,  3,
          3, 3, 3, 3, 3, 3, 97, 3, 3, 3, 3, 3, 3, 3, 3, 97, 97, 3, 3, 97,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 53, 53, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 129, 3, 3, 176, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 3, 221, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   221, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 3, 217, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   217, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 3, 213, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   213, 3,   3,   336, 3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 392, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 396, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 3, 193, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   193, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 3, 197, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   197, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 3, 201, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   201, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 400, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3,   3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 129, 3, 3, 176, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3,   3,
          3, 3, 3, 3, 3, 3, 252, 3, 3, 3, 3, 3, 3, 3, 3, 192, 3, 3, 3, 260,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 464, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 3, 205, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   205, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 468, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 189, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 189, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   189, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 185, 185, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 185, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   185, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 177, 177, 177, 177, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 177, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   177, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 181, 181, 181, 181, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 181, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   181, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 161, 161, 161, 161, 161, 161, 161, 161, 372, 376, 380, 384, 388, 3, 161, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   161, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 165, 165, 165, 165, 165, 165, 165, 165, 372, 376, 380, 384, 388, 3, 165, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   165, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 169, 169, 169, 169, 169, 169, 169, 169, 372, 376, 380, 384, 388, 3, 169, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   169, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 173, 173, 173, 173, 173, 173, 173, 173, 372, 376, 380, 384, 388, 3, 173, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   173, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 380, 384, 388, 3, 141, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   141, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 380, 384, 388, 3, 145, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   145, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 3, 149, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   149, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 3, 153, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   153, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 3, 157, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   157, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 472, 3,
          3, 3, 3, 3, 3, 3, 121, 3, 3, 3, 3, 3, 3, 3, 3, 121, 121, 3, 3, 121,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 284, 288, 3, 3, 3, 3, 3,   3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 296, 3, 3, 3, 3, 300, 304, 308,
      },
      {
          3, 3, 3, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 3, 209, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   209, 3,   3,   3,   3,   3,   3, 3,   3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3,   3,
          3, 3, 3, 3, 3, 3, 252, 3, 3, 3, 3, 3, 3, 3, 3, 192, 3, 3, 3, 260,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 109, 3,
          3, 3, 3, 3, 3, 3, 109, 3, 3, 3, 3, 3, 3, 3, 3, 109, 109, 3, 3, 109,
      },
      {
          3, 3, 3, 340, 344, 348, 352, 356, 360, 364, 368, 372, 376, 380, 384, 388, 3, 3, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   488, 3,   3,   3,   3,   3,   3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 117, 3,
          3, 3, 3, 3, 3, 3, 117, 3, 3, 3, 3, 3, 3, 3, 3, 117, 117, 3, 3, 117,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,   3,   3, 3, 105, 3,
          3, 3, 3, 3, 3, 3, 105, 3, 3, 3, 3, 3, 3, 3, 3, 105, 105, 3, 3, 105,
      },
  };
  const static u8 GOTO[][19] = {
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 10, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 17, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 24, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 46, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 50, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 51, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 52, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 46, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 67, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 46, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 46, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 115, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 0, 121, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  };
  std::vector<std::pair<StackItem, u8>> stk;
  stk.emplace_back(StackItem{}, 0);
  u32 state = 0;
  Token token = lexer.next();
  while (true) {
    u32 act = ACTION[state][token.kind], act_val = act >> 2;
    switch (act & 3) {
      case 0: {
        stk.emplace_back(token, act_val);
        state = act_val;
        token = lexer.next();
        break;
      }
      case 1: {
        StackItem __;
        // we are confident that the value must be what we expect, so directly dereference the return value of
        // `std::get_if` we are not using `std::get`, because it performs runtime check, and throws exceptions when
        // fails
        switch (act_val) {
          case 0: {
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Module> _1(
                std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
            stk.pop_back();
            for (auto &d : _2) {
              _1->decls.push_back(std::move(d));
            }
            _1->update_loc(lexer);
            __ = std::move(_1);
            break;
          }
          case 1: {
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Module> _1(
                std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
            stk.pop_back();
            for (auto &i : _2) {
              _1->infos.push_back(std::move(i));
            }
            _1->update_loc(lexer);
            __ = std::move(_1);
            break;
          }
          case 2: {
            [[maybe_unused]] std::unique_ptr<Kernel> _2(
                std::move(*std::get_if<std::unique_ptr<Kernel>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Module> _1(
                std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
            stk.pop_back();
            _1->kernels.push_back(std::move(_2));
            _1->update_loc(lexer);
            __ = std::move(_1);
            break;
          }
          case 3: {
            auto __m = std::make_unique<Module>();
            __m->update_loc(lexer);
            __ = std::move(__m);
            break;
          }
          case 4: {
            [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _5(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            int _r = to_dec(_3.piece);
            for (auto &d : _5) {
              d->kind = Decl::kIn;
              d->rank = _r;
            }
            __ = std::move(_5);
            break;
          }
          case 5: {
            [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _5(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            int _r = to_dec(_3.piece);
            for (auto &d : _5) {
              d->kind = Decl::kOut;
              d->rank = _r;
            }
            __ = std::move(_5);
            break;
          }
          case 6: {
            [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _5(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            int _r = to_dec(_3.piece);
            for (auto &d : _5) {
              d->kind = Decl::kGrid;
              d->rank = _r;
            }
            __ = std::move(_5);
            break;
          }
          case 7: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            for (auto &d : _2) {
              d->kind = Decl::kConst;
            }
            __ = std::move(_2);
            break;
          }
          case 8: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            for (auto &i : _2) {
              i->kind = Info::kUpperBound;
            }
            __ = std::move(_2);
            break;
          }
          case 9: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            for (auto &i : _2) {
              i->kind = Info::kLowerBound;
            }
            __ = std::move(_2);
            break;
          }
          case 10: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            for (auto &i : _2) {
              i->kind = Info::kPad;
            }
            __ = std::move(_2);
            break;
          }
          case 11: {
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            __ = std::move(_1);
            break;
          }
          case 12: {
            __ = std::move(std::vector<std::unique_ptr<Info>>());
            break;
          }
          case 13: {
            [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<int> _5(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Info>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
            stk.pop_back();
            _1.emplace_back(std::make_unique<Info>(Info::kUnknown, _3.piece, std::move(_5)));
            _1.back()->update_loc(lexer);
            __ = std::move(_1);
            break;
          }
          case 14: {
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<int> _3(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __v = std::vector<std::unique_ptr<Info>>();
            __v.emplace_back(std::make_unique<Info>(Info::kUnknown, _1.piece, std::move(_3)));
            __v[0]->update_loc(lexer);
            __ = std::move(__v);
            break;
          }
          case 15: {
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            __ = std::move(_1);
            break;
          }
          case 16: {
            __ = std::move(std::vector<std::unique_ptr<Decl>>());
            break;
          }
          case 17: {
            [[maybe_unused]] std::unique_ptr<Decl> _3(
                std::move(*std::get_if<std::unique_ptr<Decl>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Decl>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Decl>>>(&stk.back().first)));
            stk.pop_back();
            _1.push_back(std::move(_3));
            __ = std::move(_1);
            break;
          }
          case 18: {
            [[maybe_unused]] std::unique_ptr<Decl> _1(
                std::move(*std::get_if<std::unique_ptr<Decl>>(&stk.back().first)));
            stk.pop_back();
            auto __v = std::vector<std::unique_ptr<Decl>>();
            __v.push_back(std::move(_1));
            __ = std::move(__v);
            break;
          }
          case 19: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            double _f = to_double(_3.piece);
            auto __d = std::make_unique<Decl>(Decl::kConst, _1.piece, 0, _f);
            __d->update_loc(lexer);
            __ = std::move(__d);
            break;
          }
          case 20: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            double _f = to_double(_3.piece);
            auto __d = std::make_unique<Decl>(Decl::kConst, _1.piece, 0, _f);
            __d->update_loc(lexer);
            __ = std::move(__d);
            break;
          }
          case 21: {
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __d = std::make_unique<Decl>(Decl::kUnknown, _1.piece, 0, 0.0);
            __d->update_loc(lexer);
            __ = std::move(__d);
            break;
          }
          case 22: {
            [[maybe_unused]] Token _5(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Block> _4(
                std::move(*std::get_if<std::unique_ptr<Block>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __k = std::make_unique<Kernel>(_1.piece, std::move(_4));
            __k->update_loc(lexer);
            __ = std::move(__k);
            break;
          }
          case 23: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Stmt>> _2(
                std::move(*std::get_if<std::vector<std::unique_ptr<Stmt>>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __b = std::make_unique<Block>(std::move(_2));
            __b->update_loc(lexer);
            __ = std::move(__b);
            break;
          }
          case 24: {
            [[maybe_unused]] std::unique_ptr<Stmt> _2(
                std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Stmt>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Stmt>>>(&stk.back().first)));
            stk.pop_back();
            _1.push_back(std::move(_2));
            __ = std::move(_1);
            break;
          }
          case 25: {
            __ = std::move(std::vector<std::unique_ptr<Stmt>>());
            break;
          }
          case 26: {
            [[maybe_unused]] Token _7(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _6(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _5(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<int> _3(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __s = std::make_unique<Assign>(_1.piece, std::move(_3), std::move(_6));
            __s->update_loc(lexer);
            __ = std::move(__s);
            break;
          }
          case 27: {
            [[maybe_unused]] std::unique_ptr<Stmt> _6(
                std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Stmt> _5(
                std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __s = std::make_unique<If>(std::move(_3), std::move(_5), std::move(_6));
            __s->update_loc(lexer);
            __ = std::move(__s);
            break;
          }
          case 28: {
            [[maybe_unused]] std::unique_ptr<Block> _1(
                std::move(*std::get_if<std::unique_ptr<Block>>(&stk.back().first)));
            stk.pop_back();
            _1->update_loc(lexer);
            __ = std::move(_1);
            break;
          }
          case 29: {
            [[maybe_unused]] std::unique_ptr<Stmt> _2(
                std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            _2->update_loc(lexer);
            __ = std::move(_2);
            break;
          }
          case 30: {
            __ = std::unique_ptr<Stmt>();
            break;
          }
          case 31: {
            [[maybe_unused]] std::vector<int> _1(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            __ = std::move(_1);
            break;
          }
          case 32: {
            __ = std::vector<int>();
            break;
          }
          case 33: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<int> _1(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            _1.push_back(to_dec(_3.piece));
            __ = std::move(_1);
            break;
          }
          case 34: {
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            __ = std::vector<int>({to_dec(_1.piece)});
            break;
          }
          case 35: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kAdd, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 36: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kSub, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 37: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kMul, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 38: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kDiv, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 39: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kMod, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 40: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kLt, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 41: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kLe, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 42: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kGe, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 43: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kGt, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 44: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kEq, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 45: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kNe, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 46: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kAnd, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 47: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kOr, std::move(_1), std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 48: {
            [[maybe_unused]] std::unique_ptr<Expr> _2(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::move(_2);
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 49: {
            [[maybe_unused]] std::unique_ptr<Expr> _2(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kSub, FloatLit::ZERO(), std::move(_2));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 50: {
            [[maybe_unused]] std::unique_ptr<Expr> _2(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Binary>(Expr::kEq, FloatLit::ZERO(), std::move(_2));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 51: {
            [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::unique_ptr<Expr> _2(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            _2->update_loc(lexer);
            __ = std::move(_2);
            break;
          }
          case 52: {
            [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<int> _3(std::move(*std::get_if<std::vector<int>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Access>(_1.piece, std::move(_3));
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 53: {
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            auto __e = std::make_unique<Const>(_1.piece);
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 54: {
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            double _f = to_double(_1.piece);
            auto __e = std::make_unique<FloatLit>(_f);
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 55: {
            [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            double _f = to_double(_1.piece);
            auto __e = std::make_unique<FloatLit>(_f);
            __e->update_loc(lexer);
            __ = std::move(__e);
            break;
          }
          case 56: {
            [[maybe_unused]] std::vector<std::unique_ptr<Expr>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Expr>>>(&stk.back().first)));
            stk.pop_back();
            __ = std::move(_1);
            break;
          }
          case 57: {
            __ = std::vector<std::unique_ptr<Expr>>();
            break;
          }
          case 58: {
            [[maybe_unused]] std::unique_ptr<Expr> _3(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
            stk.pop_back();
            [[maybe_unused]] std::vector<std::unique_ptr<Expr>> _1(
                std::move(*std::get_if<std::vector<std::unique_ptr<Expr>>>(&stk.back().first)));
            stk.pop_back();
            _1.push_back(std::move(_3));
            __ = std::move(_1);
            break;
          }
          case 59: {
            [[maybe_unused]] std::unique_ptr<Expr> _1(
                std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
            stk.pop_back();
            auto __v = std::vector<std::unique_ptr<Expr>>();
            __v.push_back(std::move(_1));
            __ = std::move(__v);
            break;
          }
          case 60: {
            [[maybe_unused]] std::unique_ptr<Module> _1(
                std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
            stk.pop_back();
            __ = std::move(_1);
            break;
          }

          default:
            __builtin_unreachable();
        }
        u8 nxt = GOTO[stk.back().second][PROD[act_val]];
        stk.emplace_back(std::move(__), nxt);
        state = nxt;
        break;
      }
      case 2:
        return std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first));
      case 3:
        return token;
      default:
        __builtin_unreachable();
    }
  }
}

}  // namespace puzzle::ast
