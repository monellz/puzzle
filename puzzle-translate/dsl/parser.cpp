#include <cstdint>
#include <cstdlib>
#include <string_view>
#include <utility>
#include <variant>
#include <vector>
#include "puzzle-translate/dsl/ast.h"
namespace mlir::puzzle::dsl {
using u8 = uint8_t;
using u16 = uint16_t;
using u32 = uint32_t;

struct Token {
  enum Kind : u32 {
    _Eps,
    _Eof,
    _Err,
    Or,
    And,
    Eq,
    Ne,
    Lt,
    Le,
    Ge,
    Gt,
    Add,
    Sub,
    Mul,
    Div,
    Mod,
    Unary,
    RPar,
    Empty,
    Else,
    In,
    Out,
    Pad,
    Bound,
    Iter,
    Stencil,
    Kernel,
    RArrow,
    If,
    Assign,
    Comma,
    Colon,
    Semi,
    Not,
    LPar,
    LBrk,
    RBrk,
    LBrc,
    RBrc,
    IntLit,
    FloatLit,
    Ident
  } kind;
  std::string_view piece;
  u32 line, col;
};

using StackItem = std::variant<Token, std::unique_ptr<Module>, std::unique_ptr<Decl>,
                               std::vector<std::unique_ptr<Info>>, std::unique_ptr<Info>, std::unique_ptr<Block>,
                               std::vector<std::unique_ptr<Stmt>>, std::unique_ptr<Stmt>, std::vector<int64_t>,
                               std::unique_ptr<Expr>, std::vector<std::unique_ptr<Expr>>>;

struct Lexer {
  std::string_view string;
  std::string_view fn;
  u32 line, col;

  explicit Lexer(std::string_view string, std::string_view fn = "") : string(string), fn(fn), line(1), col(1) {}
  Token next();
};

struct Parser {
  std::variant<std::unique_ptr<Module>, Token> parse(Lexer &lexer);
};

Token Lexer::next() {
  const static Token::Kind ACC[] = {
      Token::_Err,    Token::_Err,   Token::_Eps,  Token::Not,      Token::Mod,      Token::_Err,   Token::LPar,
      Token::RPar,    Token::Mul,    Token::Add,   Token::Comma,    Token::Sub,      Token::Div,    Token::IntLit,
      Token::IntLit,  Token::Colon,  Token::Semi,  Token::Lt,       Token::Assign,   Token::Gt,     Token::Ident,
      Token::Ident,   Token::Ident,  Token::Ident, Token::Ident,    Token::LBrk,     Token::RBrk,   Token::Ident,
      Token::Ident,   Token::Ident,  Token::Ident, Token::LBrc,     Token::_Err,     Token::RBrc,   Token::Ne,
      Token::And,     Token::RArrow, Token::_Err,  Token::_Eps,     Token::FloatLit, Token::_Err,   Token::Le,
      Token::Eq,      Token::Ge,     Token::Ident, Token::In,       Token::Ident,    Token::Ident,  Token::Ident,
      Token::Ident,   Token::If,     Token::Ident, Token::Ident,    Token::Or,       Token::_Err,   Token::_Err,
      Token::IntLit,  Token::Ident,  Token::Ident, Token::Out,      Token::Pad,      Token::Ident,  Token::Ident,
      Token::Ident,   Token::_Eps,   Token::_Err,  Token::FloatLit, Token::Ident,    Token::Iter,   Token::Else,
      Token::Ident,   Token::Ident,  Token::Bound, Token::Ident,    Token::Ident,    Token::Kernel, Token::Ident,
      Token::Stencil,
  };
  const static u8 EC[] = {
      0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  1,  3,  0,  0,  0,  4,  5,  0,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 15, 15,
      15, 15, 15, 15, 15, 15, 16, 17, 18, 19, 20, 0,  0,  21, 22, 21, 21, 23, 21, 24, 24, 25, 24, 24, 24, 24,
      24, 26, 27, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28, 0,  29, 0,  24, 0,  30, 21, 31, 32, 33, 34, 24,
      24, 35, 24, 36, 37, 24, 38, 39, 24, 24, 40, 41, 42, 43, 24, 24, 44, 24, 24, 45, 46, 47, 0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0};
  const static u8 DFA_EDGE[][48] = {
      {1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 1,  12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 20,
       20, 22, 23, 24, 25, 26, 20, 20, 20, 27, 20, 28, 29, 20, 20, 20, 20, 30, 20, 20, 20, 31, 32, 33},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 0, 36, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 14, 14, 0, 0, 0, 0, 0,  0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0, 0, 0, 0, 40, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 44, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 45, 20, 20, 20, 46, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 47, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 48, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 49, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 51, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 52, 20, 20, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {37, 37, 37, 37, 37, 37, 37, 37, 54, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
       37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
      {38, 38, 0,  38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
       38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 39, 39, 0, 0, 0, 0, 0, 0, 0, 55,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0, 0, 56, 56, 0, 0, 0, 0, 0, 56, 56, 56,
       0, 0, 0, 0, 0, 0, 56, 56, 56, 56, 56, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 57, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 58, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 60, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 61, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 62, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 63, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 64, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
       37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 65, 0, 0, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0, 0, 56, 56, 0, 0, 0, 0, 0, 56, 56, 56,
       0, 0, 0, 0, 0, 0, 56, 56, 56, 56, 56, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 67, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 68, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 69, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 70, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 71, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 72, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 73, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 74, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 75, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 76, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 77, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
      {0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  20, 20, 0,  0,  0,  0,  0,  20, 20, 20,
       20, 20, 20, 20, 0, 0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0,  0,  0},
  };
  u32 l = line, c = col;
  Token::Kind last_acc = Token::_Err;
  u32 state = 0, i = 0;
  while (true) {
    u32 ch, nxt;
    if (i < string.size()) {
      ch = string[i], nxt = DFA_EDGE[state][EC[ch]];
    } else {
      ch = nxt = 0;
    }
    Token::Kind acc = ACC[nxt];
    if (acc != Token::_Err) {
      last_acc = acc;
    }
    state = nxt;
    if (nxt == 0) { // dead, should not eat this char
      // we are not using substr here, because it does range check and may throws exception
      std::string_view piece(string.data(), i);
      string = std::string_view(string.data() + i, string.size() - i);
      if (i == 0 || last_acc != Token::_Eps) {

        return Token{i == 0 ? Token::_Eof : last_acc, piece, l, c};
      } else {
        l = line, c = col, last_acc = Token::_Err, state = 0, i = 0;
      }
    } else { // continue, eat this char
      if (ch == '\n') {
        ++line, col = 1;
      } else {
        ++col;
      }
      ++i;
    }
  }
}

std::variant<std::unique_ptr<Module>, Token> Parser::parse(Lexer &lexer) {
  const static u8 PROD[] = {0,  0,  0,  0,  1,  2,  3,  4,  4,  5,  5,  5,  5,  5,  6,  7,  7,  8,
                            8,  8,  9,  9,  10, 10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                            12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 15};
  const static u16 ACTION[][42] = {
      {
          3, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 13,
      },
      {
          3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 24, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
      },
      {
          3, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
      },
      {
          3, 9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 9,
      },
      {
          3, 3, 3, 3, 3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3,
          3, 3, 3, 3, 28, 32, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 36, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 40, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 48, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 52, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 65, 3, 3, 3, 3, 3, 3, 3, 3, 65, 65, 3, 3, 65,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 60, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 33,
          33, 33, 33, 33, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 33, 3, 3, 3,
      },
      {
          3, 17, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 17,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 68, 3, 3, 3, 3, 3, 3, 3, 3, 40, 72, 3, 3, 76,
      },
      {
          3, 21, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 21,
      },
      {
          3,  3,  3,   3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 88,
          92, 96, 100, 104, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 116, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,  3, 3, 3, 3, 3,  3,  3, 57, 3,
          3, 3, 3, 3, 3, 3, 3, 57, 3, 3, 3, 57, 3, 3, 3, 3, 57, 57, 3, 3,  57,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 120, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 77, 3,
          3, 3, 3, 3, 3, 3, 3, 77, 3, 3, 3, 3, 3, 3, 3, 3, 77, 77, 3, 3,  77,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 61, 3, 3, 3, 3, 3, 3, 3, 3, 61, 61, 3, 3, 61,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 124, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 128, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 132, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 136, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 140, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 144, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 29,
          29, 29, 29, 29, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 93, 3, 3, 180, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 192,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 196,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 200, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 204, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 208, 3, 3,
      },
      {
          3, 25, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 25,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 3, 185, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   185, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 3, 181, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   181, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 3, 177, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   177, 3,   3,   228, 3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 284, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 101, 3, 3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 288, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 292, 3, 3, 3, 3, 3, 89, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 296, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 300, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 304, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 93, 3, 3, 180, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 312, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 3, 157, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   157, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 3, 161, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   161, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 3, 165, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   165, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 316, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 93, 3, 3, 180, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 68, 3, 3, 3, 3, 3, 3, 3, 3, 40, 3, 3, 3, 76,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 380, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 384, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 37,
          37, 37, 37, 37, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 37, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 41,
          41, 41, 41, 41, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 41, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 45,
          45, 45, 45, 45, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 45, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 388, 3, 3, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 49,
          49, 49, 49, 49, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49, 3, 3, 3,
      },
      {
          3, 3, 3, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 3, 169, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   169, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 392, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 153, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 153, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   153, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 149, 149, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 149, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   149, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 141, 141, 141, 141, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 141, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   141, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 145, 145, 145, 145, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 145, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   145, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 125, 125, 125, 125, 125, 125, 125, 125, 264, 268, 272, 276, 280, 3, 125, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   125, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 129, 129, 129, 129, 129, 129, 129, 129, 264, 268, 272, 276, 280, 3, 129, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   129, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 133, 133, 133, 133, 133, 133, 133, 133, 264, 268, 272, 276, 280, 3, 133, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   133, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 137, 137, 137, 137, 137, 137, 137, 137, 264, 268, 272, 276, 280, 3, 137, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   137, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 272, 276, 280, 3, 105, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   105, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 272, 276, 280, 3, 109, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   109, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 3, 113, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   113, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 3, 117, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   117, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 3, 121, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   121, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 396, 3,
          3, 3, 3, 3, 3, 3, 3, 85, 3, 3, 3, 3, 3, 3, 3, 3, 85, 85, 3, 3,   85,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 148, 152, 3,   3, 3, 3, 3, 3,   3,   3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   156, 160, 3, 3, 3, 3, 164, 168, 172,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 97, 3, 3, 3, 3, 3, 97, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 408, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 3, 173, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   173, 3,   3,   3,   3,   3, 3,   3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 68, 3, 3, 3, 3, 3, 3, 3, 3, 40, 3, 3, 3, 76,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 73, 3,
          3, 3, 3, 3, 3, 3, 3, 73, 3, 3, 3, 3, 3, 3, 3, 3, 73, 73, 3, 3,  73,
      },
      {
          3, 3, 3, 232, 236, 240, 244, 248, 252, 256, 260, 264, 268, 272, 276, 280, 3, 3, 3, 3, 3,
          3, 3, 3, 3,   3,   3,   3,   3,   3,   3,   3,   416, 3,   3,   3,   3,   3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 420, 3, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 81, 3,
          3, 3, 3, 3, 3, 3, 3, 81, 3, 3, 3, 3, 3, 3, 3, 3, 81, 81, 3, 3,  81,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3, 3, 3, 3, 3, 3, 3,  3,  3, 69, 3,
          3, 3, 3, 3, 3, 3, 3, 69, 3, 3, 3, 3, 3, 3, 3, 3, 69, 69, 3, 3,  69,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 3,   3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 93, 3, 3, 180, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 428, 3, 3, 3, 3, 3,
      },
      {
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,   3, 3, 3, 3, 3, 3, 3, 3, 3,
          3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 432, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      },
      {
          3,  3,  3,  3,  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,  3, 3, 53,
          53, 53, 53, 53, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 53, 3, 3, 3,
      },
  };
  const static u8 GOTO[][16] = {
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 20, 0, 21, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 47, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 47, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 47, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0},  {0, 0, 0, 0, 0, 0, 20, 0, 94, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 20, 0, 103, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 47, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  };
  std::vector<std::pair<StackItem, u8>> stk;
  stk.emplace_back(StackItem{}, 0);
  u32 state = 0;
  Token token = lexer.next();
  while (true) {
    u32 act = ACTION[state][token.kind], act_val = act >> 2;
    switch (act & 3) {
    case 0: {
      stk.emplace_back(token, act_val);
      state = act_val;
      token = lexer.next();
      break;
    }
    case 1: {
      StackItem __;
      // we are confident that the value must be what we expect, so directly dereference the return value of
      // `std::get_if` we are not using `std::get`, because it performs runtime check, and throws exceptions when fails
      switch (act_val) {
      case 0: {
        [[maybe_unused]] std::unique_ptr<Decl> _2(std::move(*std::get_if<std::unique_ptr<Decl>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Module> _1(
            std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
        stk.pop_back();
        _1->decls.push_back(std::move(_2));
        _1->update_loc(lexer);
        __ = std::move(_1);
        break;
      }
      case 1: {
        [[maybe_unused]] std::unique_ptr<Decl> _2(std::move(*std::get_if<std::unique_ptr<Decl>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Module> _1(
            std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
        stk.pop_back();
        _1->decls.push_back(std::move(_2));
        _1->update_loc(lexer);
        __ = std::move(_1);
        break;
      }
      case 2: {
        [[maybe_unused]] std::unique_ptr<Decl> _2(std::move(*std::get_if<std::unique_ptr<Decl>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Module> _1(
            std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
        stk.pop_back();
        _1->decls.push_back(std::move(_2));
        _1->update_loc(lexer);
        __ = std::move(_1);
        break;
      }
      case 3: {
        auto __m = std::make_unique<Module>();
        __m->update_loc(lexer);
        __ = std::move(__m);
        break;
      }
      case 4: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        __ = std::make_unique<Const>(_1.piece, to_double(_3.piece));
        break;
      }
      case 5: {
        [[maybe_unused]] Token _5(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Block> _4(std::move(*std::get_if<std::unique_ptr<Block>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        __ = std::make_unique<Stencil>(_1.piece, std::move(_4));
        break;
      }
      case 6: {
        [[maybe_unused]] Token _7(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<std::unique_ptr<Info>> _5(
            std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        __ = std::make_unique<Kernel>(_1.piece, std::move(_5));
        break;
      }
      case 7: {
        [[maybe_unused]] std::unique_ptr<Info> _2(std::move(*std::get_if<std::unique_ptr<Info>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<std::unique_ptr<Info>> _1(
            std::move(*std::get_if<std::vector<std::unique_ptr<Info>>>(&stk.back().first)));
        stk.pop_back();
        _1.push_back(std::move(_2));
        __ = std::move(_1);
        break;
      }
      case 8: {
        __ = std::move(std::vector<std::unique_ptr<Info>>());
        break;
      }
      case 9: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __i = std::make_unique<In>(_3.piece);
        __i->update_loc(lexer);
        __ = std::move(__i);
        break;
      }
      case 10: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __i = std::make_unique<Out>(_3.piece);
        __i->update_loc(lexer);
        __ = std::move(__i);
        break;
      }
      case 11: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __i = std::make_unique<Pad>(to_dec(_3.piece));
        __i->update_loc(lexer);
        __ = std::move(__i);
        break;
      }
      case 12: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __i = std::make_unique<Iter>(to_dec(_3.piece));
        __i->update_loc(lexer);
        __ = std::move(__i);
        break;
      }
      case 13: {
        [[maybe_unused]] Token _10(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _9(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<int64_t> _8(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _7(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _6(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _5(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<int64_t> _4(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __i = std::make_unique<Bound>(std::move(_4), std::move(_8));
        __i->update_loc(lexer);
        __ = std::move(__i);
        break;
      }
      case 14: {
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<std::unique_ptr<Stmt>> _2(
            std::move(*std::get_if<std::vector<std::unique_ptr<Stmt>>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __b = std::make_unique<Block>(std::move(_2));
        __b->update_loc(lexer);
        __ = std::move(__b);
        break;
      }
      case 15: {
        [[maybe_unused]] std::unique_ptr<Stmt> _2(std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<std::unique_ptr<Stmt>> _1(
            std::move(*std::get_if<std::vector<std::unique_ptr<Stmt>>>(&stk.back().first)));
        stk.pop_back();
        _1.push_back(std::move(_2));
        __ = std::move(_1);
        break;
      }
      case 16: {
        __ = std::move(std::vector<std::unique_ptr<Stmt>>());
        break;
      }
      case 17: {
        [[maybe_unused]] Token _7(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _6(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _5(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<int64_t> _3(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __s = std::make_unique<Assign>(_1.piece, std::move(_3), std::move(_6));
        __s->update_loc(lexer);
        __ = std::move(__s);
        break;
      }
      case 18: {
        [[maybe_unused]] std::unique_ptr<Stmt> _6(std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Stmt> _5(std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __s = std::make_unique<If>(std::move(_3), std::move(_5), std::move(_6));
        __s->update_loc(lexer);
        __ = std::move(__s);
        break;
      }
      case 19: {
        [[maybe_unused]] std::unique_ptr<Block> _1(std::move(*std::get_if<std::unique_ptr<Block>>(&stk.back().first)));
        stk.pop_back();
        _1->update_loc(lexer);
        __ = std::move(_1);
        break;
      }
      case 20: {
        [[maybe_unused]] std::unique_ptr<Stmt> _2(std::move(*std::get_if<std::unique_ptr<Stmt>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        _2->update_loc(lexer);
        __ = std::move(_2);
        break;
      }
      case 21: {
        __ = std::unique_ptr<Stmt>();
        break;
      }
      case 22: {
        [[maybe_unused]] std::vector<int64_t> _1(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        __ = std::move(_1);
        break;
      }
      case 23: {
        __ = std::vector<int64_t>();
        break;
      }
      case 24: {
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<int64_t> _1(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        _1.push_back(to_dec(_3.piece));
        __ = std::move(_1);
        break;
      }
      case 25: {
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        __ = std::vector<int64_t>({to_dec(_1.piece)});
        break;
      }
      case 26: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kAdd, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 27: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kSub, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 28: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kMul, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 29: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kDiv, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 30: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kMod, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 31: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kLt, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 32: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kLe, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 33: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kGe, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 34: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kGt, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 35: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kEq, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 36: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kNe, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 37: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kAnd, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 38: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kOr, std::move(_1), std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 39: {
        [[maybe_unused]] std::unique_ptr<Expr> _2(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::move(_2);
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 40: {
        [[maybe_unused]] std::unique_ptr<Expr> _2(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kSub, FloatLit::ZERO(), std::move(_2));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 41: {
        [[maybe_unused]] std::unique_ptr<Expr> _2(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Binary>(Expr::kEq, FloatLit::ZERO(), std::move(_2));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 42: {
        [[maybe_unused]] Token _3(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::unique_ptr<Expr> _2(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        _2->update_loc(lexer);
        __ = std::move(_2);
        break;
      }
      case 43: {
        [[maybe_unused]] Token _4(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<int64_t> _3(std::move(*std::get_if<std::vector<int64_t>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Access>(_1.piece, std::move(_3));
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 44: {
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        auto __e = std::make_unique<Access>(_1.piece);
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 45: {
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        double _f = to_double(_1.piece);
        auto __e = std::make_unique<FloatLit>(_f);
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 46: {
        [[maybe_unused]] Token _1(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        double _f = to_double(_1.piece);
        auto __e = std::make_unique<FloatLit>(_f);
        __e->update_loc(lexer);
        __ = std::move(__e);
        break;
      }
      case 47: {
        [[maybe_unused]] std::vector<std::unique_ptr<Expr>> _1(
            std::move(*std::get_if<std::vector<std::unique_ptr<Expr>>>(&stk.back().first)));
        stk.pop_back();
        __ = std::move(_1);
        break;
      }
      case 48: {
        __ = std::vector<std::unique_ptr<Expr>>();
        break;
      }
      case 49: {
        [[maybe_unused]] std::unique_ptr<Expr> _3(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] Token _2(std::move(*std::get_if<Token>(&stk.back().first)));
        stk.pop_back();
        [[maybe_unused]] std::vector<std::unique_ptr<Expr>> _1(
            std::move(*std::get_if<std::vector<std::unique_ptr<Expr>>>(&stk.back().first)));
        stk.pop_back();
        _1.push_back(std::move(_3));
        __ = std::move(_1);
        break;
      }
      case 50: {
        [[maybe_unused]] std::unique_ptr<Expr> _1(std::move(*std::get_if<std::unique_ptr<Expr>>(&stk.back().first)));
        stk.pop_back();
        auto __v = std::vector<std::unique_ptr<Expr>>();
        __v.push_back(std::move(_1));
        __ = std::move(__v);
        break;
      }
      case 51: {
        [[maybe_unused]] std::unique_ptr<Module> _1(
            std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first)));
        stk.pop_back();
        __ = std::move(_1);
        break;
      }

      default:
        __builtin_unreachable();
      }
      u8 nxt = GOTO[stk.back().second][PROD[act_val]];
      stk.emplace_back(std::move(__), nxt);
      state = nxt;
      break;
    }
    case 2:
      return std::move(*std::get_if<std::unique_ptr<Module>>(&stk.back().first));
    case 3:
      return token;
    default:
      __builtin_unreachable();
    }
  }
}

} // namespace mlir::puzzle::dsl
